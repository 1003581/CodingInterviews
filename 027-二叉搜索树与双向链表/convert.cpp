#include <iostream>

using namespace std;

//
#define __tmain main

#ifdef __tmain

#define debug cout

#else

#define debug 0 && cout

#endif // __tmain

#ifdef __tmain

struct TreeNode
{
	int val; struct TreeNode *left; struct TreeNode *right; TreeNode(int x)
	:val(x), left(NULL), right(NULL)
	{
	}
};

#endif  //  __tmain

class Solution
{
public:
    /**
     * [Convert description]
     * @AuthorHTL
     * @DateTime  2016-04-23T21:02:08+0800
     * @param     pRootOfTree              [description]
     * @return                             [description]
     */
    TreeNode* Convert(TreeNode* pRootOfTree)
    {
        if(pRootOfTree == NULL)
        {
            return NULL;
        }
        TreeNode *pLastNode = NULL;
        pRootOfTree = ConvertNode(pRootOfTree, &pLastNode);

        // 当递归结束后,*pLastNode指向了双向链表的尾结点
        TreeNode *node = *pLastNode;
        while(pLastNode != NULL
           && pLastNode->left != NULL)
        {
           pLastNode = pLastNode->left;
        }

        return pLastNode;
    }

    TreeNode* ConvertRecursion(TreeNode *root, TreeNode **pLastNode)
    {
        if(root == NULL)
        {
            return NULL;
        }
        TreeNode *currNode = root;

        //////////////////////////
        /// 首先中序 递归左子树
        //////////////////////////
        if(currNode->left != NULL)
        {
            ConvertRecursion(root->left, pLastNode);
        }


        //////////////////////////
        /// 接着中序开始访问根节点
        /// 在这里访问的过程演变为将左子树的根与根节点链接成一个链表
        //////////////////////////

        ///  开始链接左子树和当前根节点
        //  *pLastNode -=> currNode
        currNode->left = *pLastNode; //
        if(*pLastNode != NULL)
        {
            (*pLastNode)->right = currNode;
        }

        //  更新上一个访问的指针域
        //  由于要更新前一个指针的指针域
        //  因此需要使用其指针来修改其指向
        *pLastNode = currNode;

        //  中序遍历
        if(currNode->right != NULL)
        {
            ConvertRecursion(currNode->right, pLastNode);
        }
    }
};



int __tmain( )
{
    debug <<"test" <<endl;
    return 0;
}
